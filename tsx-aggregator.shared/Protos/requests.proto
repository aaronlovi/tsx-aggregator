syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "decimal-value.proto";

option csharp_namespace = "tsx_aggregator.Services";

service StockDataService {
    rpc GetStocksData(GetStocksDataRequest) returns (GetStocksDataReply);
    rpc GetStocksDetail(GetStocksDetailRequest) returns (GetStocksDetailReply);
    rpc GetStockSearchResults(GetStockSearchResultsRequest) returns (GetStockSearchResultsReply);

    rpc GetStocksWithUpdatedRawDataReports(GetStocksWithUpdatedRawDataReportsRequest) returns (GetStocksWithUpdatedRawDataReportsReply);
    // Raw data report to be ignored must be one that has the 'check manually' flag set to true
    rpc IgnoreRawDataReport(IgnoreRawDataReportRequest) returns (StockDataServiceReply);
}

message GetStocksDataRequest {
    string exchange = 1;
}

message GetStocksDataReply {
    bool success = 1;
    string error_message = 2;
    repeated GetStocksDataReplyItem stocksData = 3;
}

message GetStocksDetailRequest {
    string exchange = 1;
    string instrument_symbol = 2;
}

message GetStocksDetailReply {
    bool success = 1;
    string error_message = 2;
    GetStocksDataReplyItem stockDetail = 3;
}

message GetStocksDataReplyItem {
    string exchange = 1;
    string company_symbol = 2;
    string instrument_symbol = 3;
    string company_name = 4;
    string instrument_name = 5;
    google.protobuf.Timestamp created_date = 6;
    int64 current_num_shares = 7;
    int64 current_total_shareholders_equity = 8;
    int64 current_goodwill = 9;
    int64 current_intangibles = 10;
    int64 current_long_term_debt = 11;
    int64 current_dividends_paid = 12;
    int64 current_retained_earnings = 13;
    int64 oldest_retained_earnings = 14;
    int64 current_book_value = 15;
    int64 average_net_cash_flow = 16;
    int64 average_owner_earnings = 17;
    int32 num_annual_processed_cash_flow_reports = 18;
    DecimalValue per_share_price = 19;
}

message GetStockSearchResultsRequest {
    string search_term = 1;
}

message GetStockSearchResultsReply {
    bool success = 1;
    string error_message = 2;
    repeated GetStockSearchResultsReplyItem searchResults = 3;
}

message GetStockSearchResultsReplyItem {
    string exchange = 1;
    string instrument_symbol = 2;
    string company_name = 3;
}

message GetStocksWithUpdatedRawDataReportsRequest {
    string exchange = 1;
    int32 page_number = 2;
    int32 page_size = 3;
}

message GetStocksWithUpdatedRawDataReportsReply {
    bool success = 1;
    string error_message = 2;
    int32 total_items = 3;
    int32 page_number = 4;
    int32 page_size = 5;
    repeated InstrumentWithUpdatedRawData instrumentRawReportsWithUpdates = 6;
}

message InstrumentWithUpdatedRawData {
    uint64 instrument_id = 1;
    string exchange = 2;
    string company_symbol = 3;
    string instrument_symbol = 4;
    string company_name = 5;
    string instrument_name = 6;
    uint32 report_type = 7;
    uint32 report_period_type = 8;
    google.protobuf.Timestamp report_date = 9;
    repeated InstrumentWithUpdatedRawDataItem rawReportAndUpdates = 10;
}

message InstrumentWithUpdatedRawDataItem {
    uint64 instrument_report_id = 1;
    google.protobuf.Timestamp created_date = 2;
    bool is_current = 3;
    bool check_manually = 4;
    bool ignore_report = 5;
    string report_json = 6;
}

// Raw collector must find the below to be consistent
// The instrument report ids should all either:
// - have the "is_current" flag set
// - have the "check_manually" flag set
// - none of the reports should already be obsoleted
// In addition, there should be no other current reports with the same "report_date", "report_type",
//              and "report_period_type" that are not yet ignored
// If the conditions are not met, then an error is returned
message IgnoreRawDataReportRequest {
    uint64 instrument_id = 1;
    uint64 instrument_report_id_to_keep = 2;
    repeated uint64 instrument_report_ids_to_ignore = 3;
}

message StockDataServiceReply {
    bool success = 1;
    string error_message = 2;
}
